name: CI Dependencies

on:
  push:
    branches:
      - main
      - dev/**
  pull_request:
    branches:
      - main
      - dev/**

jobs:
  metadata:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Capture pip freeze
        run: python -m pip freeze > pip-freeze.txt

      - name: Capture CUDA metadata
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          info = {
              "torch_import": False,
              "torch_version": None,
              "cuda_available": False,
              "cuda_version": None,
              "device_count": 0,
          }
          try:
              import torch

              info["torch_import"] = True
              info["torch_version"] = torch.__version__
              info["cuda_available"] = torch.cuda.is_available()
              info["cuda_version"] = getattr(torch.version, "cuda", None)
              if info["cuda_available"]:
                  count = torch.cuda.device_count()
                  info["device_count"] = count
                  info["devices"] = [torch.cuda.get_device_name(i) for i in range(count)]
          except Exception as exc:  # pragma: no cover
              info["error"] = str(exc)

          Path("cuda-env.json").write_text(json.dumps(info, indent=2), encoding="utf-8")
PY
          if command -v nvidia-smi >/dev/null 2>&1; then
            nvidia-smi -q > nvidia-smi.txt
          else
            echo "nvidia-smi unavailable" > nvidia-smi.txt
          fi

      - name: Generate paper provenance manifest
        run: python tools/scripts/paper_provenance.py --output paper-provenance.json --pretty

      - name: Validate provenance schema
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          manifest = json.loads(Path("paper-provenance.json").read_text(encoding="utf-8"))
          required = ["generated_at", "git_hash", "python", "platform", "pip", "torch"]
          missing = [key for key in required if key not in manifest]
          if missing:
              raise SystemExit(f"Missing expected keys: {missing}")
          if not isinstance(manifest["pip"], list) or not manifest["pip"]:
              raise SystemExit("pip freeze output is empty")
PY

      - name: Upload dependency artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-deps-metadata
          path: |
            pip-freeze.txt
            cuda-env.json
            nvidia-smi.txt
            paper-provenance.json
